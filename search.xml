<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>useMemo</title>
      <link href="/2024/07/17/useMemo/"/>
      <url>/2024/07/17/useMemo/</url>
      
        <content type="html"><![CDATA[<h1 id="UseMemo"><a href="#UseMemo" class="headerlink" title="UseMemo"></a>UseMemo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// useMemo</span><br><span class="line">// 缓存: 消耗非常大的计算</span><br><span class="line"></span><br><span class="line">import &#123; useMemo, useState &#125; from &quot;react&quot;</span><br><span class="line"></span><br><span class="line">// 计算斐波那契数列之和</span><br><span class="line">function fib (n) &#123;</span><br><span class="line">  console.log(&#x27;计算函数执行了&#x27;)</span><br><span class="line">  if (n &lt; 3)</span><br><span class="line">    return 1</span><br><span class="line">  return fib(n - 2) + fib(n - 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App () &#123;</span><br><span class="line">  const [count1, setCount1] = useState(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  const result = useMemo(() =&gt; &#123;</span><br><span class="line">    // 返回计算得到的结果</span><br><span class="line">    return fib(count1)</span><br><span class="line">  &#125;, [count1])</span><br><span class="line"></span><br><span class="line">  // const result = fib(count1)</span><br><span class="line"></span><br><span class="line">  const [count2, setCount2] = useState(0)</span><br><span class="line">  console.log(&#x27;组件重新渲染了&#x27;)</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      this is app</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount1(count1 + 1)&#125;&gt;change count1: &#123;count1&#125;&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount2(count2 + 1)&#125;&gt;change count2: &#123;count2&#125;&lt;/button&gt;</span><br><span class="line">      &#123;result&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用UseMemo可以控制部分计算只在指定变量发生变化的时候进行，避免消耗较大的计算在每个变量发送变化的时候都伴随页面的重新渲染而重新计算，导致页面性能降低。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> useMemo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useReducer</title>
      <link href="/2024/07/12/useReducer/"/>
      <url>/2024/07/12/useReducer/</url>
      
        <content type="html"><![CDATA[<h1 id="UseReducer"><a href="#UseReducer" class="headerlink" title="UseReducer"></a>UseReducer</h1><p>同样是控制组件渲染，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// useReducer</span><br><span class="line"></span><br><span class="line">import &#123; useReducer &#125; from &quot;react&quot;</span><br><span class="line"></span><br><span class="line">// 1. 定义reducer函数 根据不同的action 返回不同的状态</span><br><span class="line"></span><br><span class="line">function reducer (state, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;INC&#x27;:</span><br><span class="line">      return state + 1</span><br><span class="line">    case &#x27;DEC&#x27;:</span><br><span class="line">      return state - 1</span><br><span class="line">    case &#x27;SET&#x27;:</span><br><span class="line">      return action.payload</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 组件中调用useReducer(reducer, 0) =&gt; [state, dispatch]</span><br><span class="line"></span><br><span class="line">// 3. 调用dispatch(&#123;type:&#x27;INC&#x27;&#125;) =&gt; 通知reducer产生一个新的状态 使用这个新状态更新UI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function App () &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, 0)</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      this is app</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;DEC&#x27; &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;state&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;INC&#x27; &#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;SET&#x27;, payload: 100 &#125;)&#125;&gt;update&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过dispatch，传递action中的状态变量，并在reducer中定义根据状态的组件渲染规则，并根据action动态调整state的值，以此实现动态渲染。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UseReducer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mock</title>
      <link href="/2024/06/10/mock/"/>
      <url>/2024/06/10/mock/</url>
      
        <content type="html"><![CDATA[<h1 id="数据Mock"><a href="#数据Mock" class="headerlink" title="数据Mock"></a>数据Mock</h1><p>一般都使用：</p><ol><li>假数据静态模拟</li><li>Mock平台</li><li>json-server等插件</li></ol><h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>新建一个<code>server</code>文件夹，然后创建一个<code>data.json</code>文件，并输入mock数据的json。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ka&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-1000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-01-01 00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dessert&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-500</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-02-01 12:30:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coffee&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;income&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-03-15 09:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;salary&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-1500</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-20 18:45:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dinner&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;income&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-05-05 14:20:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bonus&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-300</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-06-10 08:15:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;transport&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;income&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-07-01 10:30:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freelance&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-800</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-08-15 20:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movie&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;income&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">1200</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-09-10 16:40:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;investment&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pay&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">-400</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-10-25 11:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useFor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lunch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在<code>package.json</code>中添加启动命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server ./server/data.json --port 3030&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>即可直接使用。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>craco</title>
      <link href="/2024/06/10/craco/"/>
      <url>/2024/06/10/craco/</url>
      
        <content type="html"><![CDATA[<h1 id="路径解析配置"><a href="#路径解析配置" class="headerlink" title="路径解析配置"></a>路径解析配置</h1><p>首先安装craco库：<code>npm i -D @craco/craco</code>,随后创建<code>craco.config.js</code>文件进行配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">webpack</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如此可以使用<code>@</code>符号替代根目录，在导入包时可以直接使用。</p><p>需要注意的是还需要在<code>package.json</code>中进行相关配置，替换启动命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>即可。</p><h1 id="联想路径配置"><a href="#联想路径配置" class="headerlink" title="联想路径配置"></a>联想路径配置</h1><p>主要配置vscode的联想配置，添加<code>jsconfig.json</code>文件，加入后vscode会自动读取并配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">        <span class="string">&quot;paths&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> craco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactRouter</title>
      <link href="/2024/06/10/ReactRouter/"/>
      <url>/2024/06/10/ReactRouter/</url>
      
        <content type="html"><![CDATA[<h1 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h1><h2 id="基本使用方式"><a href="#基本使用方式" class="headerlink" title="基本使用方式"></a>基本使用方式</h2><p>导入react-router-dom库，使用<code>createBrowseRouter</code>创建路由，并使用<code>RouterProvider</code>作为组件使用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import &#x27;./index.css&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">import reportWebVitals from &#x27;./reportWebVitals&#x27;;</span><br><span class="line">import &#123;createBrowserRouter,RouterProvider&#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">const router = createBrowserRouter([</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    element: &lt;div&gt;我是登录页 &lt;/div&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/article&#x27;,</span><br><span class="line">    element: &lt;div&gt;我是文章页 &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;RouterProvider router=&#123;router&#125;&gt;&lt;/RouterProvider&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// If you want to start measuring performance in your app, pass a function</span><br><span class="line">// to log results (for example: reportWebVitals(console.log))</span><br><span class="line">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><br><span class="line">reportWebVitals();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610170845637.png" alt="image-20240610170845637"></p><p>在代码编写时需要使用模块化编程，因此创建一个page模块，用于存储每个页面的具体组件；创建一个router模块，用于构建router并且集成各个页面的组件。</p><h2 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h2><ul><li><p>声明式导航</p><p>使用<code>&lt;Link&gt;</code>组件进行跳转。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;</span><br><span class="line">const Login = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            我是登录</span><br><span class="line">            &lt;Link to=&quot;/article&quot;&gt;文章&lt;/Link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Login</span><br></pre></td></tr></table></figure></li></ul><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610172142075.png" alt="image-20240610172142075"></p><ul><li><p>编程式导航</p><p>使用<code>useNavigate</code>得到导航方法，调用方法进行跳转，可以绑定事件进行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link ,useNavigate&#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line">const Login = () =&gt; &#123;</span><br><span class="line">    const navigator = useNavigate()</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            我是登录</span><br><span class="line">            &lt;Link to=&quot;/article&quot;&gt;文章&lt;/Link&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;navigator(&#x27;/article&#x27;)&#125;&gt;跳转到文章&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Login</span><br></pre></td></tr></table></figure><p>结果：<img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610172637657.png" alt="image-20240610172637657"></p><h2 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h2><p>参数的传递可以更好的与后端进行交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link ,useNavigate&#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line">const Login = () =&gt; &#123;</span><br><span class="line">    const navigator = useNavigate()</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            我是登录</span><br><span class="line">            &lt;Link to=&quot;/article&quot;&gt;文章&lt;/Link&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;navigator(&#x27;/article&#x27;)&#125;&gt;跳转到文章&lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;navigator(&#x27;/article?id=100&amp;name=jack&#x27;)&#125;&gt;searchParams&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Login</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610173226369.png" alt="image-20240610173226369"></p><p>获取参数</p><ul><li>可以使用searchParams传递参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useSearchParams &#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line">const Article = () =&gt; &#123;</span><br><span class="line">    const [params]= useSearchParams()</span><br><span class="line">    const id = params.get(&#x27;id&#x27;)</span><br><span class="line">    const name = params.get(&#x27;name&#x27;)</span><br><span class="line">    return &lt;div&gt;我是文章&#123;id&#125; &#123;name&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Article</span><br></pre></td></tr></table></figure><ul><li><p>可以直接使用params传参，就是路径改成<code>/article/:id</code>，然后使用<code>useParams</code>方法传递参数即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useParams,useSearchParams &#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line">const Article = () =&gt; &#123;</span><br><span class="line">    // const [params]= useSearchParams()</span><br><span class="line">    // const id = params.get(&#x27;id&#x27;)</span><br><span class="line">    // const name = params.get(&#x27;name&#x27;)</span><br><span class="line">    const params = useParams()</span><br><span class="line">    const &#123;id&#125; = params.id</span><br><span class="line">    return &lt;div&gt;我是文章&#123;id&#125; &lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Article</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h2><p>路由嵌套关系使用<code>children</code>属性配置，同时使用<code>&lt;Outlet/&gt;</code>组件配置二级路由渲染位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Login from &quot;../page/Login&quot;;</span><br><span class="line">import Article from &quot;../page/Article&quot;;</span><br><span class="line"></span><br><span class="line">import &#123;createBrowserRouter&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import Layout from &quot;../page/Layout&quot;</span><br><span class="line">import Board from &quot;../page/Board&quot;;</span><br><span class="line">import About from &quot;../page/About&quot;;</span><br><span class="line"></span><br><span class="line">const router = createBrowserRouter([</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        element: &lt;Layout/&gt;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;/board&#x27;,</span><br><span class="line">                element: &lt;Board /&gt;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;/about&#x27;,</span><br><span class="line">                element: &lt;About /&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        element: &lt;Login /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/article/:id&#x27;,</span><br><span class="line">        element: &lt;Article /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link,Outlet &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">const Layout = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            一级路由Layout</span><br><span class="line">            &lt;Link to=&quot;/board&quot;&gt;面板&lt;/Link&gt;</span><br><span class="line">            &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">            &lt;Outlet/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Layout;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610175706451.png" alt="image-20240610175706451"></p><p>同时可以设置默认二级路由，在路由配置部分添加<code>index</code>字段并设置为true即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Login from &quot;../page/Login&quot;;</span><br><span class="line">import Article from &quot;../page/Article&quot;;</span><br><span class="line"></span><br><span class="line">import &#123;createBrowserRouter&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import Layout from &quot;../page/Layout&quot;</span><br><span class="line">import Board from &quot;../page/Board&quot;;</span><br><span class="line">import About from &quot;../page/About&quot;;</span><br><span class="line"></span><br><span class="line">const router = createBrowserRouter([</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        element: &lt;Layout/&gt;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                index:true,</span><br><span class="line">                element: &lt;Board /&gt;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;/about&#x27;,</span><br><span class="line">                element: &lt;About /&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        element: &lt;Login /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/article/:id&#x27;,</span><br><span class="line">        element: &lt;Article /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610180049328.png" alt="image-20240610180049328"></p><p>注意要将<code>Link</code>修改为<code>      &lt;Link to=&quot;/&quot;&gt;面板&lt;/Link&gt;</code>。</p><h2 id="404路由"><a href="#404路由" class="headerlink" title="404路由"></a>404路由</h2><p>添加一个<code>path:*</code>即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;*&#x27;,</span><br><span class="line">    element: &lt;NotFound /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610180440126.png" alt="image-20240610180440126"></p><h2 id="两种路由模式"><a href="#两种路由模式" class="headerlink" title="两种路由模式"></a>两种路由模式</h2><p>还有一种哈希路由模型hi，在创建路由时使用<code>createHashRouter</code>即可，这种模式可以减小后端依赖。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactRouter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux</title>
      <link href="/2024/06/09/Redux/"/>
      <url>/2024/06/09/Redux/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>管理应用状态和逻辑。</p><p>文件结构如下：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240610003310813.png" alt="image-20240610003310813"></p><p>在index.js中，集成模块中的所有状态<code>reducer</code>并导出，在modules中构建各种需要处理的状态。</p><p>例如counterStore.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createSlice&#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const counterStore = createSlice(&#123;</span><br><span class="line">    name: &#x27;counter&#x27;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        increment: state =&gt; &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement: state =&gt; &#123;</span><br><span class="line">            state.count--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const&#123;increment,decrement&#125; = counterStore.actions</span><br><span class="line"></span><br><span class="line">const reducer = counterStore.reducer</span><br><span class="line"></span><br><span class="line">export &#123;increment,decrement&#125;</span><br><span class="line">export default reducer</span><br></pre></td></tr></table></figure><p>随后进入index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123;configureStore&#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">import counterReducer from &#x27;./modules/counterStore&#x27;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123;</span><br><span class="line">    reducer: &#123;</span><br><span class="line">        counter: counterReducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><p>在react中使用中间件<code>react-redux</code>将store注入react即可在组件中使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import store from &#x27;./store&#x27;;</span><br><span class="line">import &#123;Provider&#125; from &#x27;react-redux&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用Provider进行注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const &#123;count&#125; = useSelector(state =&gt; state.counter);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><p>使用<code>useSelector</code>进行导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const &#123;count&#125; = useSelector(state =&gt; state.counter);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><p>需要修改数据，则使用 <code>useDispatch</code>函数提交action对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useDispatch,useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; increment,decrement &#125; from &#x27;./store/modules/counterStore&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const &#123;count&#125; = useSelector(state =&gt; state.counter);</span><br><span class="line">  const dispatch = useDispatch()</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(decrement())&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(increment())&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><h2 id="携带参数"><a href="#携带参数" class="headerlink" title="携带参数"></a>携带参数</h2><p>需要携带参数，则定义reducer时添加action，参数就能以payload形式传递。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createSlice&#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const counterStore = createSlice(&#123;</span><br><span class="line">    name: &#x27;counter&#x27;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        increment: state =&gt; &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement: state =&gt; &#123;</span><br><span class="line">            state.count--</span><br><span class="line">        &#125;,</span><br><span class="line">        addToNumber: (state,action) =&gt; &#123;</span><br><span class="line">            state.count = action.payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const&#123;increment,decrement,addToNumber&#125; = counterStore.actions</span><br><span class="line"></span><br><span class="line">const reducer = counterStore.reducer</span><br><span class="line"></span><br><span class="line">export &#123;increment,decrement,addToNumber&#125;</span><br><span class="line">export default reducer</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useDispatch,useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; increment,decrement,addToNumber &#125; from &#x27;./store/modules/counterStore&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const &#123;count&#125; = useSelector(state =&gt; state.counter);</span><br><span class="line">  const dispatch = useDispatch()</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(decrement())&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(increment())&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(addToNumber(10))&#125;&gt;Add 10&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>请求函数需要进行封装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createSlice&#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">const channelStore = createSlice(&#123;</span><br><span class="line">    name: &#x27;channel&#x27;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        channelList: []</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        setChannels(state, action) &#123;</span><br><span class="line">            state.channelList = action.payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const &#123;setChannels&#125; = channelStore.actions</span><br><span class="line"></span><br><span class="line">//异步请求</span><br><span class="line">const fetchChannelList = () =&gt; &#123;</span><br><span class="line">    return async (disptch) =&gt; &#123;</span><br><span class="line">        const res = await axios.get(&#x27;https://geek.itheima.net/v1_0/channels&#x27;)</span><br><span class="line">        disptch(setChannels(res.data.data.channels))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;fetchChannelList&#125;</span><br><span class="line"></span><br><span class="line">const reducer = channelStore.reducer</span><br><span class="line">export default reducer</span><br></pre></td></tr></table></figure><p><code>调用时使用useEffect</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useDispatch,useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; increment,decrement,addToNumber &#125; from &#x27;./store/modules/counterStore&#x27;;</span><br><span class="line">import &#123;fetchChannelList&#125; from &#x27;./store/modules/channelStore&#x27;;</span><br><span class="line">import &#123; useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line">function App() &#123;</span><br><span class="line">  const &#123;count&#125; = useSelector(state =&gt; state.counter);</span><br><span class="line">  const &#123;channelList&#125; = useSelector(state =&gt; state.channel);</span><br><span class="line">  const dispatch = useDispatch()</span><br><span class="line">  //useEffect</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    dispatch(fetchChannelList())</span><br><span class="line">  &#125;,[dispatch])</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(decrement())&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(increment())&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;()=&gt;dispatch(addToNumber(10))&#125;&gt;Add 10&lt;/button&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          channelList.map(item =&gt; &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;组件通信&#39;</title>
      <link href="/2024/06/09/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2024/06/09/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>使用props参数，可以直接命名，可以传递组件，接收可以直接接收props，也可以直接接收变量名。</p><ul><li>父传子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is &#123;props.name&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&#123;name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">age</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isTrue</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">list</span>=<span class="string">&#123;[1,2,3]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">obj</span>=<span class="string">&#123;&#123;name:</span> &#x27;<span class="attr">John</span>&#x27;, <span class="attr">age:</span> <span class="attr">20</span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">cb</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;callback&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        children=&#123;<span class="tag">&lt;<span class="name">span</span>&gt;</span>children<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240606225251565.png" alt="image-20240606225251565"></p><p><strong>props中的数据在子组件中不能修改。</strong></p><p>还有特殊的children，在子组件中包含的内容会被默认放到children中去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is &#123;props.children&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240606231255750.png" alt="image-20240606231255750"></p><ul><li><p>子传父</p><p>使用函数作为参数传递以实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">&#123;onGetSonMsg&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> sonMsg = <span class="string">&#x27;this is son&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    this is Son  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>onGetSonMsg(sonMsg)&#125;&gt;send msg to father<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMsg</span> = (<span class="params">msg</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    <span class="title function_">setMsg</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is &#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">onGetSonMsg</span>=<span class="string">&#123;getMsg&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240606233210284.png" alt="image-20240606233210284"></p></li><li><p>兄弟组件通信</p><p>在子组件中，传递信息到父组件，再传递到另一个子组件，这叫 <strong>状态提升</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son1</span>(<span class="params">&#123;onGetSonMsg&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> sonMsg = <span class="string">&#x27;this is son1&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    this is Son1  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>onGetSonMsg(sonMsg)&#125;&gt;send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son2</span>(<span class="params">&#123;msg&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    this is, &#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMsg</span> = (<span class="params">msg</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    <span class="title function_">setMsg</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is &#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son1</span> <span class="attr">onGetSonMsg</span>=<span class="string">&#123;getMsg&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son2</span> <span class="attr">msg</span>=<span class="string">&#123;msg&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240606234137679.png" alt="image-20240606234137679"></p></li><li><p>跨层组件通信</p><p>使用<code> createContext</code> 实现，赋值后使用<code>useContext</code> 获取数据并赋值给对应变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MsgContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son1</span>(<span class="params">&#123;onGetSonMsg&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    this is Son1  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Son2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="title function_">useContext</span>(<span class="title class_">MsgContext</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    this is son2,&#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="string">&#x27;this is msg&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MsgContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;msg&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is App</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MsgContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240607003138651.png" alt="image-20240607003138651"></p></li></ul><h1 id="useEffect的使用"><a href="#useEffect的使用" class="headerlink" title="useEffect的使用"></a>useEffect的使用</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240607010517444.png" alt="image-20240607010517444"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&quot;https://geek.itheima.net/v1_0/channels&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([])</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>)</span><br><span class="line">    <span class="keyword">const</span> jsonList = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonList)</span><br><span class="line">    <span class="title function_">setList</span>(jsonList.<span class="property">data</span>.<span class="property">channels</span>)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="title function_">getList</span>()</span><br><span class="line">    </span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is app</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240607011212577.png" alt="image-20240607011212577"></p><p>对于依赖项：</p><ul><li>没有依赖项：只在初始化渲染和组件更新时执行</li><li>依赖项为空：只在初始化时执行</li><li>有依赖项：只在初始化和依赖项更新时执行</li></ul><h2 id="清理副作用-组件卸载"><a href="#清理副作用-组件卸载" class="headerlink" title="清理副作用(组件卸载)"></a>清理副作用(组件卸载)</h2><p>防止组件卸载后相关程序依旧继续执行，导致内存泄漏。</p><p>需要在<code> useEffect</code>的结尾加上一个<code>return</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> ()&#123;</span><br><span class="line">  <span class="comment">//渲染时开启定时器</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器执行中...&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;show &amp;&amp; <span class="tag">&lt;<span class="name">Son</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;改变组件显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240607013729163.png" alt="image-20240607013729163"></p><h1 id="自定义Hook函数"><a href="#自定义Hook函数" class="headerlink" title="自定义Hook函数"></a>自定义Hook函数</h1><p>对于常用的逻辑处理语句，可以封装为Hook函数（useXxx）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">//布尔切换逻辑-自定义hook函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useToggle</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(initialValue)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setValue</span>(!value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [value, toggle]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, toggle] = <span class="title function_">useToggle</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;value&amp;&amp;<span class="tag">&lt;<span class="name">div</span>&gt;</span>this is div<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        toggle</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\王鸿轩\AppData\Roaming\Typora\typora-user-images\image-20240607020359710.png" alt="image-20240607020359710"></p><p>通用思路：</p><ol><li>声明一个use开头函数</li><li>函数内封装可复用逻辑</li><li>将状态或者回调</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/09/hello-world/"/>
      <url>/2024/06/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>🍁&amp;⭐</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
